package com.jesm3.newDualis.generatedDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jesm3.newDualis.generatedDAO.AbstractVorlesung;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ABSTRACT_VORLESUNG.
*/
public class AbstractVorlesungDao extends AbstractDao<AbstractVorlesung, Long> {

    public static final String TABLENAME = "ABSTRACT_VORLESUNG";

    /**
     * Properties of entity AbstractVorlesung.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Dozent = new Property(2, String.class, "dozent", false, "DOZENT");
        public final static Property Datum = new Property(3, String.class, "datum", false, "DATUM");
        public final static Property UhrzeitVon = new Property(4, String.class, "uhrzeitVon", false, "UHRZEIT_VON");
        public final static Property UhrzeitBis = new Property(5, String.class, "uhrzeitBis", false, "UHRZEIT_BIS");
        public final static Property Raum = new Property(6, String.class, "raum", false, "RAUM");
    };


    public AbstractVorlesungDao(DaoConfig config) {
        super(config);
    }
    
    public AbstractVorlesungDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ABSTRACT_VORLESUNG' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'DOZENT' TEXT," + // 2: dozent
                "'DATUM' TEXT," + // 3: datum
                "'UHRZEIT_VON' TEXT," + // 4: uhrzeitVon
                "'UHRZEIT_BIS' TEXT," + // 5: uhrzeitBis
                "'RAUM' TEXT);"); // 6: raum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ABSTRACT_VORLESUNG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AbstractVorlesung entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String dozent = entity.getDozent();
        if (dozent != null) {
            stmt.bindString(3, dozent);
        }
 
        String datum = entity.getDatum();
        if (datum != null) {
            stmt.bindString(4, datum);
        }
 
        String uhrzeitVon = entity.getUhrzeitVon();
        if (uhrzeitVon != null) {
            stmt.bindString(5, uhrzeitVon);
        }
 
        String uhrzeitBis = entity.getUhrzeitBis();
        if (uhrzeitBis != null) {
            stmt.bindString(6, uhrzeitBis);
        }
 
        String raum = entity.getRaum();
        if (raum != null) {
            stmt.bindString(7, raum);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AbstractVorlesung readEntity(Cursor cursor, int offset) {
        AbstractVorlesung entity = new AbstractVorlesung( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dozent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // datum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // uhrzeitVon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // uhrzeitBis
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // raum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AbstractVorlesung entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDozent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDatum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUhrzeitVon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUhrzeitBis(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRaum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AbstractVorlesung entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AbstractVorlesung entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
